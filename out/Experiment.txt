For this project we mainly used Test-Driven-Developement. Our heuristic begins from the top left node and checks the current
node, then traversing the board to the right, diagonally down to to the right, and then straight down. This is illustrated
in the diagram below:
0 1 X
3 2 X
X X X

Our original heuristic used 2 to the power of connections * the number of existing connections, but there was a problem
with this approach. The first problem was using 2 to the power of the number of connections was too small when connecting
only 3 or 4 nodes. It was overpowered by other connections that were blocked by the opponent. The sparse ones would detract
attention from better connections that were available. We solved this by changing to base 10^1 for sparse connections,
and 10^n for direct connections, where n is the number of nodes connected. See an example of our experiment below.

Original Heuristic vs SimplePlayer1 example:

1 0 0 0 0 2 0
1 0 0 0 0 1 0
1 0 0 0 0 2 0
2 2 0 0 0 1 0
1 1 0 0 0 2 0 =======>
1 2 2 0 0 1 0

As you can see from this game reenactment, our heurisitc had a better option to connect 3 nodes on the bottom row by
placing a piece in the 4th column but decided to add a piece to the second to last column instead, because they had the
same number of "connections," whether direct or indirect.